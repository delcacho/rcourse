library("rmarkdown");
render("template.Rmd","html_document");
quit()
install.packages("materializeR")
install.pckages("httr")
install.packages("httr")
install.packages("XML")
install.packages("jsonlite")
install.packages("quantmod")
install.packages("Rsymphony")
install.packages("Rsymphony")
install.packages("Rsymphony", configure.args="--with-SYMPHONY-include=/Users/timo/Applications/symphony/include/ --with-SYMPHONY-lib=/Users/timo/Applications/symphony/lib",type="source")
install.packages("Rsymphony")
install.packages("Rsymphony", configure.args="--with-SYMPHONY-include=/Users/timo/Applications/symphony/include/ --with-SYMPHONY-lib=/Users/timo/Applications/symphony/lib",type="source")
quit()
install.packages("flexdashboard")
install.packages(c("sqldf","magrittr","highcharter","DT"))
install.packages(c("sqldf", "magrittr", "highcharter", "DT"))
install.packages("rCharts")
install.packages("rCharts",type="source")
require(devtools)
install_github('rCharts', 'ramnathv')
install.packages("materializeR")
install.packages("materializeR")
install_github("timelyportfolio/materializeR")
sapply(c(1,2,3,4),function() 1)
sapply(c(1,2,3,4),function() { return(1) })
sapply(c(1,2,3,4),function(x) { return(1) })
sapply(c(1,2,3,4),function(x) 1)
getwd()
setwd("rcourse")
df <- read.table("germancredit.csv")
?read.table
df <- read.table("germancredit.csv",sep=",")
head(df)
df <- read.table("germancredit.csv",sep=",",header=TRUE)
head(df)
df <- read.table("germancredit.csv",sep=",",header=FALSE,col.names(paste("Col",1:15)))
df <- read.table("germancredit.csv",sep=",",header=FALSE,col.names=paste("Col",1:15))
df <- read.table("germancredit.csv",sep=",",header=FALSE,col.names=paste("Col",1:16))
df <- read.table("germancredit.csv",sep=",",header=FALSE,col.names=paste("Col",1:17))
names(df)
df <- read.table("germancredit.csv",sep=",",header=FALSE,col.names=paste("Col",1:21))
df
head(df)
paste("Col",1:21)
install.packages("openxlsx")
library("openxlsx")
install.packages("openxlsx",type="source")
?install.packages
install.packages("openxlsx",method="source")
df <- readWorkbook("countries.xlsx",sheet=1)
head(df)
df <- readWorkbook("countries.xlsx",sheet=1)
head(df)
detach(openxlsx)
detach("openxlsx")
detach("package:openxlsx")
xlsxFile <-
system.file("countries.xlsx", package = "openxlsx")
df <- readWorkbook(xlsxFile=myfile, sheet=1)
library(openxlsx)
xlsxFile <-
system.file("countries.xlsx", package = "openxlsx")
df <- readWorkbook(xlsxFile=myfile, sheet=1)
xlsxFile <-
+     system.file("countries.xlsx", package = "openxlsx")
xlsxFile <-
system.file("countries.xlsx", package = "openxlsx")
df <- readWorkbook(xlsxFile=xlsxFile, sheet=1)
myFile <-
system.file("countries.xlsx", package = "openxlsx")
df <- readWorkbook(xlsxFile=myFile, sheet=1)
install.packages("googlesheets")
gs_ls()
library("googlesheets")
gs_ls()
install.packages("openssl")
gs_ls()
be <- gs_title("Britain Elects / Public Opinion")
head(be)
gs_ws_ls(be)
be <- gs_title("Britain Elects / Public Opinion")
ws <- gs_read(ss=be, ws = "Westminster voting intentions", skip=1)
ws
head(ws)
as.data.frame(ws)
df <- as.data.frame(ws)
head(df)
install.packages("stringr")
library(stringr)
ls("package:stringr")
ls("package:stats")
ls("package:datasets")
library(datasets)
?WorldPhones
ls("package:stringr")
cat("Saved by the bell\a\a\a")
str_extract_all(s,"[a-z]+")
s <- "Saved by the bell"
str_extract_all(s,"[a-z]+")
str_extract_all(s,"S[a-z]*")
str_extract_all("S","S[a-z]*")
str_extract_all("S","S[a-z]+")
str_extract_all(s,"[a-z]+")
str_extract_all(s,"[A-Z|a-z]+")
str_extract_all("Only capitalized Letters","[A-Z][a-z]+")
str_extract_all("Only capitalized Words","[A-Z][a-z]+")
str_extract_all("S","S[a-z]+")
str_extract_all("S","S[a-z]*")
str_extract_all("Only capitalized Words but not NATO","[A-Z][a-z]+")
str_count("Only capitalized Words but not NATO","[A-Z][a-z]+")
str_detect("Only capitalized Words but not NATO","[A-Z][a-z]+")
str_detect("all words lowercase","[A-Z][a-z]+")
str_detect("all words lowercase","^[a-z]+")
str_extract_all("all words lowercase","^[a-z]+")
str_extract_all("all words lowercase","[a-z]+")
str_count("My name is Paula","[a-z]+")
str_extract_all("My name is Paula","[a-z]+")
str_extract("all words lowercase","^[a-z]+")
str_extract_all("all words lowercase","^[a-z]+")
str_extract_all("all words lowercase","^[a-z]+")[[1]]
str_extract_all("My name is Paula","[a-z][a-z]*")
str_extract_all("My name is Paula","[?A-Z][a-z]*")
str_extract_all("My name is Paula","[!A-Z][a-z]*")
str_extract_all("My name is Paula","[!a-z][a-z]*")
str_extract_all("My name is Paula","[?!a-z][a-z]*")
str_extract_all("My name is Paula","[a-z]*$")
str_extract_all("My name is Paula","[a-z]+$")
str_extract_all("My name is Paula","$[a-z]")
str_count("Only capitalized Words but not NATO","[A-Z]+")
str_count("Only capitalized Words but not NATO","[A-Z][A-Z]+")
str_count("Only capitalized Words but not NATO","[A-Z][A-Z]*")
book <- readLines("http://www.gutenberg.org/files/1112/1112.txt")
head(book)
book <- str_trim(book)
str_extract_all(book,"The")
str_extract_all(book,"he")
book[sapply(book, function(x) str_detect(x,"^The"))]
book[sapply(book, function(x) str_detect(x,"^The "))]
book[sapply(book, function(x) str_detect(x,"^The"))]
book[sapply(book, function(x) str_detect(x,"^The"))]
book[sapply(book, function(x) str_detect(x,"^The "))]
book[str_detect(book,"^The")]
book[sapply(book, function(x) str_detect(x,"^The"))]
book[sapply(book, function(x) str_detect(x,"^The"))]
book[sapply(book, function(x) str_detect(x,"^[^A]"))]
book[sapply(book, function(x) str_detect(x,"^[^A-Z]"))]
book[sapply(book, function(x) str_detect(x,"^[^A-Z]"))]
str_count("My name is Paula","[^A-Z][a-z]+"))]
str_count("My name is Paula","[^A-Z][a-z]+")
str_extract_all("My name is Paula","[^A-Z][a-z]+")
str_extract_all("My name is Paula","[^A-Z\s][a-z]+")
str_extract_all("My name is Paula","[^A-Z\b][a-z]+")
str_extract_all("My name is Paula","\\b[a-z]*\\b")
str_extract_all("My name is Paula","\\b[a-z]+\\b")
str_extract_all("my name is Paula","\\b[a-z]+\\b")
"\\a"
'\\a'
'\a'
cat("\\a")
book[sapply(book, function(x) str_detect(x,"a[.]+b"))]
str_detect("aab","a[.]+b"))
str_detect("aab","a[.]+b")
str_detect("aab","a.+b")
str_detect("aab aab aab aab","a.+b")
str_extract_all("aab aab aab aab","a.+b")
str_extract_all("aacb aab aab aab","a.+b")
str_detect("aab?","\\?")
str_extract_all("aab?","\\?")
str_extract_all("aab?","[?]")
str_extract_all("aab?","\\?")
str_extract_all("aab?","[?]")
str_extract_all(book,"^W.[?]")
sapply(book,function(x) str_extract_all(x,"^W.[?]"))
sapply(book,function(x) str_extract_all(x,"^W.+[?]"))
sapply(book,function(x) str_extract_all(x,"^W.*\\?"))
sapply(book,function(x) str_extract_all(x,"W.*\\?"))
table(sapply(book,function(x) str_extract_all(x,"W.*\\?")))
table(str_extract_all(book,"W.*\\?"))
str_extract_all(book,"W.*\\?")
vec <- str_detect(book,"W.*\\?")
table(vec)
vec <- str_detect(book,"W.*\\?$")
table(vec)
book[str_detect(book,"W.*\\?$")]
vec <- str_detect(book,"^W.*\\?$")
book[str_detect(book,"^W.*\\?$")]
book[str_detect(book,"^W.*\\?")]
str_extract_all(book,"W.*\\?")
book[str_detect(book,"^W.*\\?")]
